<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zk.mapper.MonsterMapper">
    <!--
        配置addMonster
        1.id="addMonster" 接口的方法名
        2.parameterType="com.zk.entity.Monster" 放入的参数类型
        3.注意：com.zk.entity.Monster可以简写
        4.values (#{age}, #{birthday}, #{email}, #{gender}, #{name}, #{salary}) monster对象的属性名
        5.useGeneratedKeys	（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法
        来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。
        6.keyProperty	（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值
        或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。
    -->
    <insert id="addMonster" parameterType="Monster" useGeneratedKeys="true" keyProperty="id">
        insert into `monster`
        (`age`, `birthday`, `email`, `gender`, `name`, `salary`)
        values (#{age}, #{birthday}, #{email}, #{gender}, #{name}, #{salary});
    </insert>

    <delete id="deleteMonster" parameterType="Integer">
        delete from `monster` where `id` = #{id};
    </delete>

    <update id="updateMonster" parameterType="Monster">
        UPDATE `monster` set age = #{age}, birthday = #{birthday} where id = #{id};
    </update>

    <select id="getMonsterById" resultType="Monster">
        select * from `monster` where `id` = #{id};
    </select>

    <select id="findAllMonster" resultType="Monster">
        select * from `monster`;
    </select>

</mapper>